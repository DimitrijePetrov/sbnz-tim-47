package rules.forward;

import java.time.LocalDateTime;
import java.time.LocalDate;
import java.time.LocalTime;

import com.weatherforecast.model.MeasuredHourlyWeatherData;
import com.weatherforecast.model.PredictedHourlyPrecipitationProbability;

rule "create predicted precipitation probability object if it does not exist"
salience 6
    when
        MeasuredHourlyWeatherData(
            date == LocalDateTime.now().toLocalDate(),
            hour == LocalTime.now().getHour()
        )
        not(
            PredictedHourlyPrecipitationProbability(
                date == LocalDateTime.now().plusHours(1).toLocalDate(), //Template, replace 1 with hours int
                hour == LocalTime.now().plusHours(1).getHour()
            )
        )
    then
        System.out.println("Object created for date and time: " + LocalDateTime.now().plusHours(1));
        insert(new PredictedHourlyPrecipitationProbability(LocalDateTime.now().plusHours(1)));
end

rule "check if there was precipitation in the past hour"
salience 5
    when
        $m: MeasuredHourlyWeatherData(
            date == LocalDateTime.now().toLocalDate(),
            hour == LocalTime.now().getHour(),
            $precipitation: precipitation
        )
        $p: PredictedHourlyPrecipitationProbability(
            date == LocalDateTime.now().plusHours(1).toLocalDate(),
            hour == LocalTime.now().plusHours(1).getHour(),
            precipitationProbability == null
        )
    then
        Integer probability = ($m.getPrecipitation() == 0) ? 0 : 50;
        modify($p){
            setPrecipitationProbability(probability)
        }
        System.out.println("Base probability: " + probability);
end

rule "increase probability of precipitation based on humidity and cloud cover"
salience 4
    when
        $m: MeasuredHourlyWeatherData(
            date == LocalDateTime.now().toLocalDate(),
            hour == LocalTime.now().getHour(),
            $humidity: humidity,
            $cloudCover: cloudCover
        )
        $p: PredictedHourlyPrecipitationProbability(
            date == LocalDateTime.now().plusHours(1).toLocalDate(),
            hour == LocalTime.now().plusHours(1).getHour(),
            precipitationProbability != null,
            modifiersApplied == false
        )
    then
        modify($p){
            addHumidityModifier($humidity),
            addCloudCoverModifier($cloudCover),
            setModifiersApplied(true)
        }
        System.out.println("Modified probability: " + $p.getPrecipitationProbability());
end

rule "decrease probability of precipitation based on wind speed"
salience 3
no-loop true
    when
        $m: MeasuredHourlyWeatherData(
            date == LocalDateTime.now().toLocalDate(),
            hour == LocalTime.now().getHour(),
            $windSpeed: windSpeed
        )
        $p: PredictedHourlyPrecipitationProbability(
            date == LocalDateTime.now().plusHours(1).toLocalDate(), //Template, replace 1 with hours into the future
            hour == LocalTime.now().plusHours(1).getHour(), //Template, replace 1 with hours into the future
            precipitationProbability != null,
            modifiersApplied == true
        )
    then
        modify($p){
            applyWindSpeedFactor($windSpeed)
        }
        System.out.println("Wind speed probability: " + $p.getPrecipitationProbability());
end
